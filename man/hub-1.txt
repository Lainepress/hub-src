hub(1)
======


NAME
----
hub - manage Haskell hubs (for selecting toolchains, libraries and sandboxes)


SYNOPSIS
--------

----
    hub usage
    hub help    [<hub-command>]
    hub version
    hub default [<g-hub>|-]
    hub ls
    hub set     [<hub>|-]
    hub info    [<hub>]
    hub name
    hub path    [<hub>]
    hub xml     [<hub>]
    hub init    [<hub>]   <u-hub'>
    hub cp      [<u-hub>] <u-hub'>
    hub mv      [<u-hub>] <u-hub'>
    hub rm       <u-hub>
    hub swap    [<u-hub>] <u-hub'>
----

DESCRIPTION
-----------

Each of the installed Haskell toolkit commands vector through
the hub wrapper for selecting the apropropriate compiler
tools and libraries (i.e., package database). The hub command 
is used to manage and configure the named 'hubs' that select
the versions of the tools and libraries to use. These hubs
can be used as flexible, lightweight development sandboxes.

Each hub is named. If the name starts with a numeric digit
then it is a global hub -- being shared, imutable and 
preinstalled (with the system packagemanager). Otherwise
it names a (private) user hub that can have packages
installed into it.

Use 'hub ls' to list the available hubs and 'hub init' to create
a new hub based on an existing hub -- the new hub will inherit
all of the global packages of the hub it is based on.

To mark a directory and its subdirectories for use with a hub
use 'hub set'. To invoke a toolkit command in the context of
a particular hub set the HUB environment variable for the 
execution of the command. E.g.,
-----
      HUB=2011.2.0.1 ghc-pkg list
-----
To copy, rename, remove and swap the contents of two hubs use
'hub cp', 'hub mv', 'hub rm' and 'hub swap', respectively.


COMMANDS
--------


`hub usage`::

     Lists the syntax of all the hub commands.


`hub help    [<hub-command>]`::

     Lists the help for a command or all commands if none
     specified. See "hub usage" for a command-syntax summary.


`hub version`::

     Lists the version information.


`hub default [<g-hub>|-]`::

     (Needs to be run as root.) If no arguments are given then this
     command lists the the default global hub for the system (i.e.,
     the default global hub used to set up each user's 'home' hub). If
     a global hub <g-hub> is specified then <g-hub> will become the
     default global hub. If a '-' is specified then any older default
     settings are discarded and the system default re-established.


`hub ls`::

     Lists your user hubs and all of the global hubs.


`hub set     [<hub>|-]`::

     Sets the 'current' hub for a directory and its
     sub-directories. The HUB environment variable can be set to a hub
     name to override this setting.


`hub info    [<hub>]`::

     Lists the vital stats for the named or current hub. (See 'hub set'
     on how to set the current hub.)


`hub name`::

     Lists the name of the current hub. (See 'hub set' on how to set
     the current hub.)


`hub path    [<hub>]`::

     Lists the path of the XML file defining the named or current
     hub. (See 'hub set' on how to set the current hub.)


`hub xml     [<hub>]`::

     Lists the contents of the XML file defining the named or current
     hub. (See 'hub set' on how to set the current hub.)


`hub init    [<hub>]   <u-hub'>`::

     Creates an empty user hub, <u-hub'>. The new hub inherits the
     global hub of <hub> (or the current hub). (See 'hub set' on how
     to set the current hub.)


`hub cp      [<u-hub>] <u-hub'>`::

     Duplicates the user <u-hub> (or the current hib) in
     <u-hub'>. (See 'hub set' on how to set the current hub.)


`hub mv      [<u-hub>] <u-hub'>`::

     Renames user hub <u-hub> (or the current hub) to <u-hub'>. (See
     'hub set' on how to set the current hub.)


`hub rm       <u-hub>`::

     Deletes user hub <hub>.


`hub swap    [<u-hub>] <u-hub'>`::

     Swaps the contents of user hub <u-hub> (or the current hub) with
     user hub <u-hub'>.


EXAMPLE 1
---------

List the packages in the (installed) 2011.2.0.1 Haskell Platform:

----
     HUB=2011.2.0.1 ghc-pkg list
----


EXAMPLE 2
---------

Create a new user hub `foo` based on 2011.4.0.0 platform, attach it to
the current directory, and install the latest edition of `hexpat` into
it.

----
     hub init 2011.4.0.0 foo
     hub set foo
     cabal install hexpat
----


EXAMPLE 3
---------

Duplicates the 2010.4.0.0-based `foo` hub of example 2 into hub `bar`
and installs the SHA package into it. `foo` wil now contain the
2010.4.0.0 packages plus `hexpat` and any other packages it needs and
`bar` will contain all this plus package `SHA` plus any additional
packages it need.

----
     hub cp foo bar
     HUB=bar cabal install SHA
----


EXAMPLE 4
---------

Unpacks `GLUT-2.2.2.1` and runs one of its example programs using the
(installed) Haskell Platform 2011.2.0.1.

----
     cabal unpack GLUT-2.2.2.1
     HUB=2011.2.0.1 runhaskell GLUT-2.2.2.1/examples/BOGLGP/Chapter01/Simple.hs
----


ENVIRONMENT VARIABLES
---------------------

`HUB`::

	This environment variable determines the hub that the hub
	wrapper will use while invoking a compiler tool. If it is not
	set then the .hub file (set by `hub set`) in the current
	directory or one its parent directories is used to determine
	the 'current' hub. If no parent directory defines the current
	hub then the default global hub is used (see the `hub default`
	command). The `HUB` environment variable overrides all of
	these so it is best left unset unless you really want to force
	a single hub to be used for the current session regardless of
	current directory.


FILES
-----

[dot]`hub`::

	(A bug in docbook aparently forbids literals from starting
	with a period.) Lists the name of the hub for the current
	directory and it's subdirectories.

`~/.hubrc/hub/<u-hub>.xml`::

	Contains the hub-spefification file for user hub <u-hub>.

`~/.hubrc/lib/<u-hub>/package.config`::

	Contains the package database for user hub <u-hub>.

`/usr/hs/bin`::
	Haskell tools ~-- this directory should be put on the user
        path if the tools aren't installed in /usr/bin.

`/usr/hs/hub/<g-hub>.xml`::

    XML configuration file for global hub <g-hub>.

`/usr/hs/db`::

	Package databases for system hubs.

`/usr/hs/ghc/<version>`::

	Installation directory for GHC <version>.

`/usr/hs/hp/<version>`::

	Installation directory for Haskell Platform <version>.


SEE ALSO
--------

hub(5)::

	Describes the format of the XML configuration files used to
	represent the user and global hubs.


http://justhub.org::

	The home page of the JustHub distribution contains
	introductory material and links to wikis and articles.


BUGS
----

The Hub issue tracker is at https://github.com/justhub/hub-gen/issues.



AUTHOR
------
Chris Dornan <chris@chrisdornan.com>
